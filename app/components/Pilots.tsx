"use client";

import React, { useState } from "react";

interface Complex {
  re: number;
  im: number;
}

export default function Pilots() {
    const [centerFreq, setCenterFreq] = useState(2.3e9);
    const [subcarrierSpacing, setSubcarrierSpacing] = useState(15e3);
    const [symbolDuration, setSymbolDuration] = useState(66.67);
    const [antennaPort, setAntennaPort] = useState(0); // New state for antenna port
    const [results, setResults] = useState<any[]>([]);

    const PilotPositionsByPort: number[][][] = {
        0: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ],
        1: [
            // PilotPositions for antenna port 1
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ],
        2: [
            // PilotPositions for antenna port 2
            [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],
            [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
            // ... (rest of the positions for port 2)
        ],
        3: [
            // PilotPositions for antenna port 3
            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
            // ... (rest of the positions for port 3)
        ],
        length: 0,
        pop: function (): number[][] | undefined {
            throw new Error("Function not implemented.");
        },
        push: function (...items: number[][][]): number {
            throw new Error("Function not implemented.");
        },
        concat: function (...items: ConcatArray<number[][]>[]): number[][][] {
            throw new Error("Function not implemented.");
        },
        join: function (separator?: string): string {
            throw new Error("Function not implemented.");
        },
        reverse: function (): number[][][] {
            throw new Error("Function not implemented.");
        },
        shift: function (): number[][] | undefined {
            throw new Error("Function not implemented.");
        },
        slice: function (start?: number, end?: number): number[][][] {
            throw new Error("Function not implemented.");
        },
        sort: function (compareFn?: ((a: number[][], b: number[][]) => number) | undefined): number[][][] {
            throw new Error("Function not implemented.");
        },
        splice: function (start: number, deleteCount?: number): number[][][] {
            throw new Error("Function not implemented.");
        },
        unshift: function (...items: number[][][]): number {
            throw new Error("Function not implemented.");
        },
        indexOf: function (searchElement: number[][], fromIndex?: number): number {
            throw new Error("Function not implemented.");
        },
        lastIndexOf: function (searchElement: number[][], fromIndex?: number): number {
            throw new Error("Function not implemented.");
        },
        every: function <S extends number[][]>(predicate: (value: number[][], index: number, array: number[][][]) => value is S, thisArg?: any): this is S[] {
            throw new Error("Function not implemented.");
        },
        some: function (predicate: (value: number[][], index: number, array: number[][][]) => unknown, thisArg?: any): boolean {
            throw new Error("Function not implemented.");
        },
        forEach: function (callbackfn: (value: number[][], index: number, array: number[][][]) => void, thisArg?: any): void {
            throw new Error("Function not implemented.");
        },
        map: function <U>(callbackfn: (value: number[][], index: number, array: number[][][]) => U, thisArg?: any): U[] {
            throw new Error("Function not implemented.");
        },
        filter: function <S extends number[][]>(predicate: (value: number[][], index: number, array: number[][][]) => value is S, thisArg?: any): S[] {
            throw new Error("Function not implemented.");
        },
        reduce: function (callbackfn: (previousValue: number[][], currentValue: number[][], currentIndex: number, array: number[][][]) => number[][]): number[][] {
            throw new Error("Function not implemented.");
        },
        reduceRight: function (callbackfn: (previousValue: number[][], currentValue: number[][], currentIndex: number, array: number[][][]) => number[][]): number[][] {
            throw new Error("Function not implemented.");
        },
        find: function <S extends number[][]>(predicate: (value: number[][], index: number, obj: number[][][]) => value is S, thisArg?: any): S | undefined {
            throw new Error("Function not implemented.");
        },
        findIndex: function (predicate: (value: number[][], index: number, obj: number[][][]) => unknown, thisArg?: any): number {
            throw new Error("Function not implemented.");
        },
        fill: function (value: number[][], start?: number, end?: number): number[][][] {
            throw new Error("Function not implemented.");
        },
        copyWithin: function (target: number, start: number, end?: number): number[][][] {
            throw new Error("Function not implemented.");
        },
        entries: function (): ArrayIterator<[number, number[][]]> {
            throw new Error("Function not implemented.");
        },
        keys: function (): ArrayIterator<number> {
            throw new Error("Function not implemented.");
        },
        values: function (): ArrayIterator<number[][]> {
            throw new Error("Function not implemented.");
        },
        includes: function (searchElement: number[][], fromIndex?: number): boolean {
            throw new Error("Function not implemented.");
        },
        flatMap: function <U, This = undefined>(callback: (this: This, value: number[][], index: number, array: number[][][]) => U | readonly U[], thisArg?: This | undefined): U[] {
            throw new Error("Function not implemented.");
        },
        flat: function <A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[] {
            throw new Error("Function not implemented.");
        },
        at: function (index: number): number[][] | undefined {
            throw new Error("Function not implemented.");
        },
        findLast: function <S extends number[][]>(predicate: (value: number[][], index: number, array: number[][][]) => value is S, thisArg?: any): S | undefined {
            throw new Error("Function not implemented.");
        },
        findLastIndex: function (predicate: (value: number[][], index: number, array: number[][][]) => unknown, thisArg?: any): number {
            throw new Error("Function not implemented.");
        },
        toReversed: function (): number[][][] {
            throw new Error("Function not implemented.");
        },
        toSorted: function (compareFn?: ((a: number[][], b: number[][]) => number) | undefined): number[][][] {
            throw new Error("Function not implemented.");
        },
        toSpliced: function (start: number, deleteCount: number, ...items: number[][][]): number[][][] {
            throw new Error("Function not implemented.");
        },
        with: function (index: number, value: number[][]): number[][][] {
            throw new Error("Function not implemented.");
        },
        [Symbol.iterator]: function (): ArrayIterator<number[][]> {
            throw new Error("Function not implemented.");
        },
        [Symbol.unscopables]: {}
    };
    


    const PilotSymbolsByPort: { re: number; im: number }[][][] = {
        0: [
            [
                { re: 0.70710677, im: 0.70710677 }, { re: 0.70710677, im: -0.70710677 }, { re: 0.70710677, im: -0.70710677 }, { re: 0.70710677, im: -0.70710677 }
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 }
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 }
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 }
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 }
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 }
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
            ],
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
            ],
            [
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                { re: 0.70710677, im: -0.70710677 },
            ],
        ],
        1: [
            // PilotSymbols for antenna port 1
            [
                { re: -0.70710677, im: 0.70710677 },
                { re: 0.70710677, im: 0.70710677 },
                // ... (rest of the symbols for port 1)
            ],
        ],
        2: [
            // PilotSymbols for antenna port 2
            [
                { re: 0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: -0.70710677 },
                // ... (rest of the symbols for port 2)
            ],
        ],
        3: [
            // PilotSymbols for antenna port 3
            [
                { re: -0.70710677, im: -0.70710677 },
                { re: -0.70710677, im: 0.70710677 },
                // ... (rest of the symbols for port 3)
            ],
        ],
        length: 0,
        pop: function (): { re: number; im: number; }[][] | undefined {
            throw new Error("Function not implemented.");
        },
        push: function (...items: { re: number; im: number; }[][][]): number {
            throw new Error("Function not implemented.");
        },
        concat: function (...items: ConcatArray<{ re: number; im: number; }[][]>[]): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        join: function (separator?: string): string {
            throw new Error("Function not implemented.");
        },
        reverse: function (): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        shift: function (): { re: number; im: number; }[][] | undefined {
            throw new Error("Function not implemented.");
        },
        slice: function (start?: number, end?: number): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        sort: function (compareFn?: ((a: { re: number; im: number; }[][], b: { re: number; im: number; }[][]) => number) | undefined): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        splice: function (start: number, deleteCount?: number): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        unshift: function (...items: { re: number; im: number; }[][][]): number {
            throw new Error("Function not implemented.");
        },
        indexOf: function (searchElement: { re: number; im: number; }[][], fromIndex?: number): number {
            throw new Error("Function not implemented.");
        },
        lastIndexOf: function (searchElement: { re: number; im: number; }[][], fromIndex?: number): number {
            throw new Error("Function not implemented.");
        },
        every: function <S extends { re: number; im: number; }[][]>(predicate: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => value is S, thisArg?: any): this is S[] {
            throw new Error("Function not implemented.");
        },
        some: function (predicate: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => unknown, thisArg?: any): boolean {
            throw new Error("Function not implemented.");
        },
        forEach: function (callbackfn: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => void, thisArg?: any): void {
            throw new Error("Function not implemented.");
        },
        map: function <U>(callbackfn: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => U, thisArg?: any): U[] {
            throw new Error("Function not implemented.");
        },
        filter: function <S extends { re: number; im: number; }[][]>(predicate: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => value is S, thisArg?: any): S[] {
            throw new Error("Function not implemented.");
        },
        reduce: function (callbackfn: (previousValue: { re: number; im: number; }[][], currentValue: { re: number; im: number; }[][], currentIndex: number, array: { re: number; im: number; }[][][]) => { re: number; im: number; }[][]): { re: number; im: number; }[][] {
            throw new Error("Function not implemented.");
        },
        reduceRight: function (callbackfn: (previousValue: { re: number; im: number; }[][], currentValue: { re: number; im: number; }[][], currentIndex: number, array: { re: number; im: number; }[][][]) => { re: number; im: number; }[][]): { re: number; im: number; }[][] {
            throw new Error("Function not implemented.");
        },
        find: function <S extends { re: number; im: number; }[][]>(predicate: (value: { re: number; im: number; }[][], index: number, obj: { re: number; im: number; }[][][]) => value is S, thisArg?: any): S | undefined {
            throw new Error("Function not implemented.");
        },
        findIndex: function (predicate: (value: { re: number; im: number; }[][], index: number, obj: { re: number; im: number; }[][][]) => unknown, thisArg?: any): number {
            throw new Error("Function not implemented.");
        },
        fill: function (value: { re: number; im: number; }[][], start?: number, end?: number): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        copyWithin: function (target: number, start: number, end?: number): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        entries: function (): ArrayIterator<[number, { re: number; im: number; }[][]]> {
            throw new Error("Function not implemented.");
        },
        keys: function (): ArrayIterator<number> {
            throw new Error("Function not implemented.");
        },
        values: function (): ArrayIterator<{ re: number; im: number; }[][]> {
            throw new Error("Function not implemented.");
        },
        includes: function (searchElement: { re: number; im: number; }[][], fromIndex?: number): boolean {
            throw new Error("Function not implemented.");
        },
        flatMap: function <U, This = undefined>(callback: (this: This, value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => U | readonly U[], thisArg?: This | undefined): U[] {
            throw new Error("Function not implemented.");
        },
        flat: function <A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[] {
            throw new Error("Function not implemented.");
        },
        at: function (index: number): { re: number; im: number; }[][] | undefined {
            throw new Error("Function not implemented.");
        },
        findLast: function <S extends { re: number; im: number; }[][]>(predicate: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => value is S, thisArg?: any): S | undefined {
            throw new Error("Function not implemented.");
        },
        findLastIndex: function (predicate: (value: { re: number; im: number; }[][], index: number, array: { re: number; im: number; }[][][]) => unknown, thisArg?: any): number {
            throw new Error("Function not implemented.");
        },
        toReversed: function (): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        toSorted: function (compareFn?: ((a: { re: number; im: number; }[][], b: { re: number; im: number; }[][]) => number) | undefined): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        toSpliced: function (start: number, deleteCount: number, ...items: { re: number; im: number; }[][][]): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        with: function (index: number, value: { re: number; im: number; }[][]): { re: number; im: number; }[][][] {
            throw new Error("Function not implemented.");
        },
        [Symbol.iterator]: function (): ArrayIterator<{ re: number; im: number; }[][]> {
            throw new Error("Function not implemented.");
        },
        [Symbol.unscopables]: {}
    };

    const handleGenerate = () => {
        const output = [];
        let pilotIndex = 0;
    
        // Get PilotPositions and PilotSymbols for the selected antenna port
        const PilotPositions = PilotPositionsByPort[antennaPort];
        const PilotSymbols = PilotSymbolsByPort[antennaPort];
    
        // Flatten PilotSymbols in column-major order
        const flatSymbols: Complex[] = [];
        for (let col = 0; col < 4; col++) {
          for (let row = 0; row < PilotSymbols.length; row++) {
            const symbol = PilotSymbols[row]?.[col];
            if (symbol) flatSymbols.push(symbol);
          }
        }
    
        const numRows = PilotPositions.length;
        const numCols = PilotPositions[0].length;
    
        for (let col = 0; col < numCols; col++) {
          for (let row = 0; row < numRows; row++) {
            if (PilotPositions[row][col] === 1) {
              const freq = centerFreq + (row - Math.floor(numRows / 2)) * subcarrierSpacing;
              const time = col * symbolDuration;
              const symbol = pilotIndex < flatSymbols.length ? flatSymbols[pilotIndex] : null;
    
              output.push({
                pilotNumber: pilotIndex + 1,
                row,
                col,
                frequencyHz: freq,
                timeUs: time,
                symbol,
              });
    
              pilotIndex++;
            }
          }
        }
    
        setResults(output);
      };
    
      return (
        <div className="p-6 max-w-4xl mx-auto space-y-6">
          <h1 className="text-2xl font-bold">Pilot Symbol Mapper</h1>
    
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <label>
              Center Frequency (Hz)
              <input
                type="number"
                value={centerFreq}
                onChange={(e) => setCenterFreq(parseFloat(e.target.value))}
                className="border p-2 w-full"
              />
            </label>
            <label>
              Subcarrier Spacing (Hz)
              <input
                type="number"
                value={subcarrierSpacing}
                onChange={(e) => setSubcarrierSpacing(parseFloat(e.target.value))}
                className="border p-2 w-full"
              />
            </label>
            <label>
              Symbol Duration (us)
              <input
                type="number"
                value={symbolDuration}
                onChange={(e) => setSymbolDuration(parseFloat(e.target.value))}
                className="border p-2 w-full"
              />
            </label>
            <label>
              Antenna Port
              <select
                value={antennaPort}
                onChange={(e) => setAntennaPort(parseInt(e.target.value))}
                className="border p-2 w-full"
              >
                <option value={0}>Antenna Port 0</option>
                <option value={1}>Antenna Port 1</option>
                <option value={2}>Antenna Port 2</option>
                <option value={3}>Antenna Port 3</option>
              </select>
            </label>
          </div>
    
          <button
            onClick={handleGenerate}
            className="bg-blue-600 text-white px-4 py-2 rounded"
          >
            Generate Table
          </button>
    
          {results.length > 0 && (
            <table className="w-full border mt-6 text-sm">
              <thead>
                <tr>
                  <th className="border px-2 py-1">#</th>
                  <th className="border px-2 py-1">Row</th>
                  <th className="border px-2 py-1">Col</th>
                  <th className="border px-2 py-1">Freq (Hz)</th>
                  <th className="border px-2 py-1">Time (us)</th>
                  <th className="border px-2 py-1">Symbol</th>
                </tr>
              </thead>
              <tbody>
                {results.map((r) => (
                  <tr key={r.pilotNumber}>
                    <td className="border px-2 py-1">{r.pilotNumber}</td>
                    <td className="border px-2 py-1">{r.row}</td>
                    <td className="border px-2 py-1">{r.col}</td>
                    <td className="border px-2 py-1">{r.frequencyHz.toFixed(2)}</td>
                    <td className="border px-2 py-1">{r.timeUs.toFixed(2)}</td>
                    <td className="border px-2 py-1">
                      {r.symbol ? `${r.symbol.re} + ${r.symbol.im}j` : "N/A"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      );
    }